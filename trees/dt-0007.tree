\import{dt-macros}
\author{liamoc}
\title{Recursively defined semantic domains}

\p{Suppose we extend our notion of expressions in [the \cal{C} language](dt-0000) with parameterless \em{higher-order} procedures:
##{
\begin{array}{l}
\mathcal{E}\; \Coloneqq \; \cdots \mid \mathsf{proc}\ \mathcal{C}\\
\mathcal{C}\; \Coloneqq \; \cdots \mid x
\end{array}
}}
\subtree{
\taxon{Example}
\title{Using higher-order procedures}
\p{We can store procedures in variables, so the program:
##{\mathit{inc} := (\mathsf{proc}\ a := a + 1); \mathit{inc}; \mathit{inc}}
has the same effects on the variable #{a} as the program:
##{a := a + 1; a := a + 1}
}
}
\p{For our [denotational semantics](dt-0001), our domains now take this form (#{\textcolor{blue}{\text{blue}}} parts are new vs. \ref{dt-0004}), where #{\uplus} denotes \em{disjoint union}:
##{
\begin{array}{lcl}
	\mathbf{E} & \triangleq & \Sigma \rightarrow \mathbb{Z}\textcolor{blue}{\ \uplus\ \mathbf{C}}\\
    \mathbf{B} & \triangleq & \Sigma \rightarrow \mathbb{B} \\
    \mathbf{C} & \triangleq & \Sigma \rightarrow \Sigma \\[0.2em]
    \Sigma  & \triangleq & \mathcal{V} \rightarrow \mathbb{Z}\textcolor{blue}{\ \uplus\ \mathbf{C}}
\end{array}
}
\transclude{dt-000P}
Unfolding the definition of #{\Sigma}, we end up with a recursive equation for the definition of #{\mathbf{C}}:
##{\mathbf{C} \; = \; (\mathcal{V} \rightarrow (\mathbb{Z} \uplus \mathbf{C})) \rightarrow (\mathcal{V} \rightarrow (\mathbb{Z} \uplus \mathbf{C}))}
Such equations have \em{no} set-theoretic solution, even if we weaken equality to mere [set isomorphism](dm-000B) (here notated #{\simeq}).
}
\subtree{\taxon{Example}\title{A simpler equation with no solution}
\p{Consider the recursive equation #{X = X \rightarrow \mathbb{B}}. Cantor's theorem says that there is no set #{X} such that #{X \simeq \pow{X}} (where #{\pow{X}} is the [power set](dm-0006) of #{X}), and seeing as #{\pow{X} \simeq (X \rightarrow \mathbb{B})} it follows that #{X = X \rightarrow \mathbb{B}} has no solution.}
}
\p{Any kind of \em{higher-order} construct leads to such recursive domain equations.}
\scope{
  \put\transclude/toc{false}
  \put\transclude/numbered{false}
\subtree{
\taxon{Upshot}
\p{
	There are no (nontrivial) set-theoretic solutions to the recursive domain equations that arise from \em{higher-order} language constructs.
}
}
}
