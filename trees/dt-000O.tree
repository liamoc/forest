\import{dt-macros}
\taxon{Exercise}
\author{liamoc}
\p{Let #{\mathbf{K}_K} denote the chain of values #{x_1, x_2, x_3, \dots, x_K} where #{a \leq b} implies #{x_a \sqsubseteq x_b}. There is one [monotonic](dt-000J) function #{\mathbf{K}_1 \rightarrow \mathbf{K}_1}:}
\figure{\tex{\usepackage{tikz}}{
\begin{tikzpicture}
	\node (a) at (0,0) {$\bullet$};
	\node (b) at (1,0) {$\bullet$};
	\draw[->,thick] (a) edge[bend left] (b);
\end{tikzpicture}}}
\p{And there are three monotonic functions #{\mathbf{K}_2 \rightarrow \mathbf{K}_2}:}
\figure{
\tex{\usepackage{tikz}}{
\begin{tikzpicture}
	\node (a) at (0,0) {$\bullet$};
	\node (b) at (1,0) {$\bullet$};
		\node (a1) at (0,1) {$\bullet$};
	\node (b1) at (1,1) {$\bullet$};
	\draw[->,thick] (a) edge (b);
					\draw[thick] (b) edge (b1);
		\draw[thick] (a) edge (a1);
	\draw[->,thick] (a1) edge (b1);
\end{tikzpicture}$\quad$
\begin{tikzpicture}
	\node (a) at (0,0) {$\bullet$};
	\node (b) at (1,0) {$\bullet$};
		\node (a1) at (0,1) {$\bullet$};
	\node (b1) at (1,1) {$\bullet$};
					\draw[thick] (b) edge (b1);
	\draw[->,thick] (a) edge (b);
		\draw[thick] (a) edge (a1);
	\draw[->,thick] (a1) edge (b);
\end{tikzpicture}$\quad$
\begin{tikzpicture}
	\node (a) at (0,0) {$\bullet$};
	\node (b) at (1,0) {$\bullet$};
		\node (a1) at (0,1) {$\bullet$};
	\node (b1) at (1,1) {$\bullet$};
	\draw[->,thick] (a) edge (b1);
		\draw[thick] (a) edge (a1);
				\draw[thick] (b) edge (b1);
	\draw[->,thick] (a1) edge (b1);
\end{tikzpicture}
}
}
\ol{
	\li{ Write down the monotonic functions #{\mathbf{K}_3 \rightarrow \mathbf{K}_3}.}
	\scope{
	\put\transclude/toc{false}
	\put\transclude/numbered{false}
	\put\transclude/expanded{false}
	\subtree{
    \taxon{Solution}
    \p{When drawn as a diagram like the above, the monotonic functions are all those whose lines do not cross.}
  }}
	\li{ Write a simple recursive program to calculate the number of monotonic functions #{\mathbf{K}_n \rightarrow \mathbf{K}_m}.}
	\scope{
	\put\transclude/toc{false}
	\put\transclude/numbered{false}
	\put\transclude/expanded{false}
	\subtree{
	  \taxon{Solution}
\p{In Haskell:}
    \pre{monotonics :: Int -> Int -> Int
monotonics n 1 = 1
monotonics n m = sum [monotonics (n-x) (m-1) | x <- [0..n]]}
}}
}
